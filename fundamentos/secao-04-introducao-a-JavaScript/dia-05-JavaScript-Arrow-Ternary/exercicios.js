
// Sem o template literals:
console.log('Primeira linha;\n' + 'Segunda linha;\n' + 'Terceira linha;\n');

console.log('Ol√° ${age}!')

function hello() {
    let saudacoes = ["Hello World!", "Ol√° Mundo!"];
    console.log(saudacoes[0]);


}

function imprimeIdade() {
    for (let idade = 30; idade <= 40; idade += 1) {
        console.log('Idade dentro do for:', idade)
    }
}
imprimeIdade()


let pessoa = {
    nome: 'Danilo',
    idade: 26
}
pessoa = {
    nome: 'Amanda',
    idade: 27
}

console.log('Nome:', pessoa.nome);
console.log('Idade:', pessoa.idade);

console.log();

let = favoriteFood = 'Lasanha';
favoriteFood = 'Hamburguer';
console.log(favoriteFood);

const name = 'Adriana';
const lastName = 'Soares';
console.log(`Ol√° ${name} ${lastName}! `);

function soma(a, b) {
    let resultado = a + b;
    return resultado;
}
let a = 3;
let b = 5;
console.log(`O resultado da soma de  ${a} e ${b} √© ${soma(a, b)}`
)
/* üöÄ Modifique a estrutura das fun√ß√µes a seguir para que elas sejam arrow functions;

üöÄ Transforme a fun√ß√£o numeroAleatorio em uma arrow function; */

numeroAleatorio = () => Math.random();
console.log(numeroAleatorio());

/* üöÄ Transforme a fun√ß√£o hello em uma arrow function; */
hello = (nome) => `Ol√°, ${nome}!`

let nome = 'Ivan';
console.log(hello(nome));

let speed = 200;
const speedCar = (speed) => {
    const trueTest = (speed >= 120) ? `Voc√™ ultrapassou o limite de velocidade` : `Voc√™ est√° na velocidade permitida`;
    return trueTest;
}
console.log(speedCar(speed));

/*Crie uma fun√ß√£o que ligue e desligue um motor de um carro.
Crie uma vari√°vel para armazenar o valor de status do seu motor (lembre-se de armazenar o tipo de vari√°vel da forma correta);
Crie a fun√ß√£o ligarDesligar utilizando arrow functions. Ela n√£o receber√° nenhum par√¢metro;
Crie a l√≥gica para ligar e desligar o motor (a l√≥gica dever√° utilizar uma condicional para ligar e desligar o motor);
Imprima no terminal ‚ÄúO motor est√° ligado‚Äú e ‚ÄúO motor est√° desligado‚Äú (lembre-se de utilizar o template literals nesse momento).
B√¥nus (opcional): tente fazer o mesmo exerc√≠cio utilizando ternary operator.*/

let status = 'desligado';

const ligarDesligar = () => (
    status === 'desligado' ? status = 'ligado' : status = 'desligado'
)

console.log(`O motor est√° ${ligarDesligar()}`); // O motor est√° ligado
console.log(`O motor est√° ${ligarDesligar()}`); // O motor est√° desligado
console.log(`O motor est√° ${ligarDesligar()}`); // O motor est√° ligado


/* 
üöÄ Crie uma fun√ß√£o que calcule a √°rea de um c√≠rculo.

Na matem√°tica, a f√≥rmula para calcular a √°rea de um c√≠rculo √©: √°rea = PI vezes o raio elevado ao quadrado.

Com base nessa informa√ß√£o:

Crie a fun√ß√£o circleArea, que recebe o valor do raio como par√¢metro, utilizando arrow functions;

Crie uma vari√°vel para armazenar o valor de PI (lembre-se de armazenar o tipo de vari√°vel da forma correta);

Crie a l√≥gica para retornar a √°rea do c√≠rculo;

Imprima no terminal ‚ÄúEssa √© a √°rea do c√≠rculo: resultado da fun√ß√£o‚Äú (lembre-se de utilizar o template literals nesse momento).*/

circleArea = (raio) => {
    const PI = 3.141592653;
    let area = PI * Math.pow(raio, 2);
    return area;
}
console.log(`Essa √© a area do c√≠rculo: ${circleArea(5).toFixed(2)} `);

// üöÄ Crie uma fun√ß√£o que receba uma frase como par√¢metro e retorne a maior palavra da frase.

const longestWord = (phares) => {
    const arrayWords = phares.split(' ');
    let maxWord = 0;
    let result = '';
    for (const word of arrayWords) {
        if (word.length > maxWord) {
            maxWord = word.length;
            result = word;
        }
    }

    return result;
}
let phares = 'Antonio foi ao banheiro e n√£o sabemos o que aconteceu';
console.log(longestWord(phares));